'use strict'

const Joi = require('joi')
const BaseSvgScrapingService = require('../base-svg-scraping')

const schema = Joi.object({
  message: Joi.alternatives()
    .try([/^\d*$/, Joi.equal('unknown')])
    .required(),
}).required()

module.exports = class SnykVulnerabilityGitHub extends BaseSvgScrapingService {
  static render({ vulnerabilities }) {
    let color = 'red'
    if (vulnerabilities === '0') {
      color = 'brightgreen'
    }
    return {
      message: vulnerabilities,
      color,
    }
  }

  static get category() {
    return 'quality'
  }

  static get defaultBadgeData() {
    return {
      label: 'vulnerabilities',
    }
  }

  static get route() {
    return {
      base: 'snyk/vulnerabilities/github',
      format: '([^/]+)/([^/]+)(?:/(.+))?',
      capture: ['user', 'repo', 'manifestFilePath'],
    }
  }

  static get examples() {
    return [
      {
        title: 'Snyk Vulnerabilities for GitHub Repo',
        pattern: ':user/:repo',
        namedParams: {
          user: 'badges',
          repo: 'shields',
        },
        staticExample: this.render({ vulnerabilities: '0' }),
      },
      {
        title: 'Snyk Vulnerabilities for GitHub Repo (Specific Manifest)',
        pattern: ':user/:repo/:manifestFilePath',
        namedParams: {
          user: 'badges',
          repo: 'shields',
          manifestFilePath: 'gh-badges/package.json',
        },
        staticExample: this.render({ vulnerabilities: '0' }),
        documentation: `
          <p>
            Provide the direct path to your target manifest file. Snyk does not
            support using a specific branch for this, so do not include "blob" nor a branch name.
          </p>
          `,
      },
    ]
  }

  async handle({ user, repo, manifestFilePath }) {
    const url = `https://snyk.io/test/github/${user}/${repo}/badge.svg`
    const options = {}

    if (manifestFilePath) {
      options.qs = {
        targetFile: manifestFilePath,
      }
    }
    const { message: vulnerabilities } = await this._requestSvg({
      url,
      schema,
      options,
      errorMessages: {
        404: 'repo or manifest not found',
      },
    })

    return this.constructor.render({ vulnerabilities })
  }
}
